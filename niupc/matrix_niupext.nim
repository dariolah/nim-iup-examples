import niup/niupc
import niup/niupext
import strformat

const TEST_IMAGE_SIZE=20

let image_data_32  =
  [
  000'u8,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255, 
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,000,000,255,255,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,255,255,255,192,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,
  000,000,000,255,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,255,
  000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255,000,000,000,255
  ]

proc mousemove_cb(ih:PIhandle, lin, col:int):int =
  echo fmt"mousemove_cb({lin}, {col})\n"
  return IUP_DEFAULT

proc drop(self, drop:PIhandle, lin, col:int):int =
  echo fmt"drop_cb({lin}, {col})\n"
  if lin == 3 and col == 1:
    withPIhandle drop:
      "1" "A - Test of Very Big String for Dropdown!"
      "2" "B"
      "3" "C"
      "4" "XXX"
      "5" "5"
      "6" "6"
      "7" "7"
      "8" nil
      "VALUE" "4"
    return IUP_DEFAULT
  return IUP_IGNORE


proc dropcheck_cb(self:PIhandle, lin, col:int):int =
  if lin == 3 and col == 1:
    return IUP_DEFAULT
  if lin == 4 and col == 4:
    return IUP_CONTINUE
  return IUP_IGNORE

proc togglevalue_cb(self:PIhandle, lin, col, value:int):int =
  echo fmt"togglevalue_cb({lin}, {col})={value}\n"
  return IUP_DEFAULT

proc click(self:PIhandle, lin, col:cint):int =
  echo fmt"click_cb({lin}, {col})\n"
  SetAttribute(self,"MARKED", nil)  # clear all marks
  SetAttributeId2(self,"MARK", lin, 0, "1")
  SetfAttribute(self,"REDRAW", "L%d", lin)
  return IUP_DEFAULT

proc enteritem_cb(ih:PIhandle, lin, col:cint):int =
  SetAttribute(ih,"MARKED", nil)  # clear all marks
  SetAttributeId2(ih,"MARK", lin, 0, "1")
  SetfAttribute(ih,"REDRAW", "L%d", lin)
  return IUP_DEFAULT

proc create_matrix():PIhandle =
  let mat = Matrix(nil)

  withPIhandle mat:
    "NUMLIN" "4"
    "NUMCOL" "8"
    "1:1"    "5.6\n3.33"
    "2:1"    "2.2"
    "3:2"    "Very Very Very Very Very Large Text"
    "1:2"    "4.5"

  if GetInt(nil, "UTF8MODE") != 0:
     SetAttribute(mat, "2:2", "UTF-8 üòÅ")
  else:
     SetAttribute(mat, "2:2", "NO UTF-8 :(")

  withPIhandle mat:
    "3:1"           "3.4"
    "3:3"           "Font Test"
    "SORTSIGN2"     "DOWN"
    "RESIZEMATRIX"  "YES"
    "FONT3:3"       "Helvetica, 24"
    "MASK*:3"       "[a-zA-Z][0-9a-zA-Z_]*"
    "TYPE4:1"       "COLOR"
    "4:1"           "255 0 128"
    "TYPE4:2"       "FILL"
    "4:2"           "60"
    "SHOWFILLVALUE" "Yes"

  let image = ImageRGBA(TEST_IMAGE_SIZE, TEST_IMAGE_SIZE, image_data_32)
  withPIhandle mat:
    "TYPE4:3"            "IMAGE"
    handle "4:3"          image
    "TOGGLECENTERED"     "Yes"
    "MARKMODE"           "CELL"
    "MARKMULTIPLE"       "YES"
    "FRAMEVERTCOLOR1:2"  "BGCOLOR"
    "FRAMEHORIZCOLOR1:2" "0 0 255"
    "FRAMEHORIZCOLOR1:3" "0 255 0"
    "FRAMEVERTCOLOR2:2"  "255 255 0"
    "FRAMEVERTCOLOR*:4"  "0 255 0"
    "FRAMEVERTCOLOR*:5"  "BGCOLOR"
    "20:8"               "The End"
    "NUMCOL_VISIBLE"     "3"
    "NUMLIN_VISIBLE"     "5"
    cb "DROPCHECK_CB"    dropcheck_cb
    cb "DROP_CB"         drop
    cb "TOGGLEVALUE_CB"  togglevalue_cb

  result = mat

proc MatrixTest() =
  let mat = create_matrix()
  let box = Vbox(mat, nil)
  SetAttribute(box, "MARGIN", "10x10")

  let dlg = Dialog(box)
  SetAttribute(dlg, "TITLE", "IupMatrix Simple Test")
  ShowXY(dlg, IUP_CENTER, IUP_CENTER)

proc mainProc =
  Open()
  ControlsOpen()
  ImageLibOpen()

  when defined(Linux):
    SetGlobal("UTF8MODE", "YES")

  MatrixTest()

  MainLoop()
  Close()

if isMainModule:
  mainProc()
